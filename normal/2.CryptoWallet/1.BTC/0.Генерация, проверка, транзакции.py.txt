############################################################
# Генерация дочернего адреса кошелька для каждого пользователя:
# Чтобы получить наш нулевой адрес Биткойн кошелька на основе seed фразы (12VeK1eRgPHRUikNLXq3Nuz99gS2S46QMD), нам нужно пройти всю цепочку преобразований.
# Методом проб и ошибок мне все-таки удалось получить адрес кошелька следующим кодом:

#from bipwallet.utils import *

#def gen_address(index):
    # Наша seed фраза
#    seed = 'vivid area able second bicycle advance demand alpha flip stable drift route'

    # Мастер ключ из seed фразы
#    master_key = HDPrivateKey.master_key_from_mnemonic(seed)

    # Public key из мастер ключа по пути 'm/44/0/0/0'
#    root_keys = HDKey.from_path(master_key, "m/44'/0'/0'/0")[-1].public_key.to_b58check()

    # Extended public key
#    xpublic_key = str(root_keys, encoding="utf-8")

    # Адрес дочернего кошелька в зависимости от значения index
#    address = Wallet.deserialize(xpublic_key, network='BTC').get_child(index, is_prime=False).to_address()

#    rootkeys_wif = HDKey.from_path(master_key, f"m/44'/0'/0'/0/{index}")[-1]

    # Extended private key
#    xprivatekey = str(rootkeys_wif.to_b58check(), encoding="utf-8")

    # Wallet import format
#    wif = Wallet.deserialize(xprivatekey, network='BTC').export_to_wif()

#    return address, str(wif, 'utf-8')

#print(gen_address(0))

# Данная функция возвращает адрес кошелька и wif в зависимости номера. Максимальное число с которым удалось получить адрес это 999999999.
# wif (Wallet import format) - это просто кодирование байтов ключа в кодировку Base58 + контрольная сумма. Он нам понадобится в дальнейшем при генерации транзакции.
# Это все значит, что имея только одну seed фразу мы можем создать 1 млрд дочерних адресов.
# Каждому пользователю при регистрации мы будем выдавать новый адрес, через который он сможет оплачивать по BTC. 
# Появляется ограничение на 1 млрд пользователей, но нам никто не запрещает использовать несколько seed фраз или генерировать каждому юзеру новую фразу, но тогда каждая оплата будет кидаться не в общий ваш кошелек, а по разным.
############################################################
############################################################
############################################################
# 2.Проверка баланса и транзакции:
# Теперь нужно проверить баланс этого адреса. 
# Для этого мы будем обращаться к сайту Blockchain.com дабы получить нужную информацию.

import requests

# Адрес кошелька пользователя 
# wallet = '12VeK1eRgPHRUikNLXq3Nuz99gS2S46QMD'
# wallet = gen_address(0)
wallet = (input("  WIF : >>> ").strip())


url = f'https://blockchain.info/rawaddr/{wallet}'
x = requests.get(url)
wallet = x.json()


print(' Получено  :'+str(wallet['total_received']))
print('Отправлено :'+str(wallet['total_sent']))
print('  Баланс   :'+str(wallet['final_balance']))
#print('Транзакции:'+str(wallet['txs']))

if wallet['total_received']==0:
  print('баланс пустой')
 
# Вот таким простым кодом мы можем получить всю информацию по балансу и транзакциях пользователя.
# Дальше все зависит от логики самого приложения.
############################################################
############################################################
############################################################
# 3.Транзакции
# Нам нужно чтобы мы могли отправить его же деньги обратно.
# Для этого воспользуемся библотекой bit, воспользуемся командой pip install bit.

from bit import PrivateKey

# Приватный ключ из wif
my_key = PrivateKey(wif='L46ixenNSu8Bqk899ZrH8Y96t8DHqJ1ZyxzQBGFTbh38rLHLaPoY')

# Количество долларов перевода, можно поменять на btc
money=0.1

# Кошелек куда будут переведены деньги
wallet='17ya3bCpPioyPH8kAyFkEDBUqdjF6wwPxo'

# Коммисия перевода, если поставить слишком маленькую, то транзакцию не примут
# И чем больше коммисия, тем быстрее пройдет перевод
fee=2000

# Генерация транзакции
tx_hash = my_key.create_transaction([(wallet, money, 'usd')],fee=fee,absolute_fee=True)

print(tx_hash)



# В итоге мы получили вот такую транзакцию:

# 0100000001fe64490fce5e85d5eb00865663a3d44f4108549fdb2840b086cfc781390d4a2d010000006a47304402202dc1496d28bb10d50d94d70870e2a79ea472c5960de8f7418bb30f9b96643efc02204691547c98edad3181a056bf6404601efe289200ba8e3073a2f5b7c0c7f4fec10121026516c551584b484ce3ca7bb71bbf24cce133bf40bdf4e2ce5a3936bc7e66a2abffffffff02e3020000000000001976a9144c83a20250ccb62ce2b3b1ea80c6082b634fdf9f88ac08f40200000000001976a9144c83a20250ccb62ce2b3b1ea80c6082b634fdf9f88ac00000000

# Выглядит красиво, но что с этим делать?
# Можно зайти на сайт https://www.blockchain.com/btc/pushtx
# и вручную отправить эту транзакцию.
############################################################
#
# error: Microsoft Visual C++ 14.0 is required. Get it with "Build Tools for Visual Studio":