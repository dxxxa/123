import requests
import os.path
import base58
import sys






class Fork():
	def __init__(self, address):
    
		btc = self.btc_balance(address)
        
		# bch = self.bch_balance(address)
		# btg = self.btg_balance(address)
		# btx = self.btx_balance(address)
		# superbtc = self.superbtc_balance(address)
		# b2x = self.b2x_balance(address)
		# lbtc = self.lbtc_balance(address)
		# bcx = self.bcx_balance(address)
		print('| %s | %s |\n' % (address, btc))





    
    
    


	def btc_balance(self, address):
		while True:
			r = requests.get('https://blockchain.info/q/addressbalance/%s' % address)
			if r.text != 'Maximum concurrent requests for this endpoint reached. Please try again shortly.':
				return 'BTC:%s' % r.text



	# bitcoin cash
	def bch_balance(self, address):
		r = requests.get('https://bitcoincash.blockexplorer.com/api/addr/%s/?noTxList=1' % address)
		balance = r.json()['balance']
		return 'BCH:%s' % str(balance)

	# bitcore (error: Max retries exceeded with url) soon...
	# def btx_balance(self, address):
	# 	r = requests.get('https://insight.bitcore.cc/api/addr/%s/?noTxList=1' % address)
	# 	return 'BTX:%s' % str(r.json()['balance'])

	# superbtc
	# def superbtc_balance(self, address):
	#	r = requests.get('http://block.superbtc.org/insight-api/addr/%s/?noTxList=1' % address)
	#	return 'SUPERBTC:%s' % r.json()['balance']

	# segwit2x
	# def b2x_balance(self, address):
	#	r = requests.get('https://explorer.b2x-segwit.io/b2x-insight-api/addr/%s/?noTxList=1' % address)
	#	return 'B2X:%s' % r.json()['balance']

	# lbtc.io (http://explorer.lbtc.io/ is not work now)
	# def lbtc_balance(self, address):
	# 	r = requests.get('http://api.lbtc.io/search3?param=%s' % address)
	# 	balance = int(r.json()['result']) / 100000000
	# 	return 'LBTC:%s' % str(balance)

	# bitcoin gold	
	#def btg_balance(self, address):
	#	decoded = base58.b58decode_check(address)
	#	if decoded[0] == 0:
	#		decoded = bytearray(decoded)
	#		decoded[0] = 38
	#		address_btg = base58.b58encode_check(bytes(decoded))
	#		r = requests.get('https://btgexplorer.com/api/addr/%s/?noTxList=1' % address_btg)
	#		return 'BTG:%s' % str(r.json()['balance'])
	#	else:
	#		return 'BTG:None'

	# bitcoinX 
	# def bcx_balance(self, address):
	#	r = requests.get('https://bcx.info/insight-api/addr/%s/?noTxList=1' % address)
	#	if r.text != 'Invalid address: Address has mismatched network type.. Code:1':
	#		return 'BCX:%s' % r.json()['balance']
	#	else :
	#		return 'BCX:0'


# example
f = open('addresses.txt', 'r')
for line in f:
	s = Fork(line)