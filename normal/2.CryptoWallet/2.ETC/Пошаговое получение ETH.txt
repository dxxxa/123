import random #1
import secp256k1Crypto #2
from Crypto.Hash import keccak #3

#1 Создание случайного числа в качестве закрытого ключа
#  Сгенерируйте 256-битное случайное число:

#r = random.randint(0, 2**256)
r = 127 #14098500174935566811277058424286341448580475958153633347646702637404947635488
print(r)  #14098500174935566811277058424286341448580475958153633347646702637404947635488

qwe = r.to_bytes(32, byteorder='big').hex()
print(qwe)   #'1f2b77e3a4b50120692912c94b204540ad44404386b10c615786a7efaa065d20'

#################################################################
#2 Используйте пакет secp256k1-py для генерации открытого ключа
#  Затем преобразуйте закрытый ключ в открытый ключ:

private_key = qwe #'1f2b77e3a4b50120692912c94b204540ad44404386b10c615786a7efaa065d20'
private_key = bytes.fromhex(private_key)
privkey = secp256k1Crypto.PrivateKey(private_key)
privkey.pubkey.serialize(compressed=False).hex()   #  '04dfa13518ff965498743f3a01439dd86bc34ff9969c7a3f0430bbf8865734252953c9884af787b2cadd45f92dff2b81e21cfdf98873e492e5fdc07e9eb67ca74d'

#################################################################
#3 Вычислить хеш-значение открытого ключа
#Чтобы использовать алгоритм хеширования keccak256, вы можете использовать инструмент PyCryptodome и использовать pip для установки:
#pip install pycryptodome
#Удалите 04 из начала открытого ключа, преобразуйте оставшуюся часть в байтовую строку и используйте алгоритм keccak256 для хеширования:

#>>> from Crypto.Hash import keccak
keccak_hash = keccak.new(digest_bits=256)
public_key = privkey.pubkey.serialize(compressed=False).hex()[2:] #'04dfa13518ff965498743f3a01439dd86bc34ff9969c7a3f0430bbf8865734252953c9884af787b2cadd45f92dff2b81e21cfdf98873e492e5fdc07e9eb67ca74d'[2:]
public_key = bytes.fromhex(public_key)
keccak_hash.update(public_key)   #<Crypto.Hash.keccak.Keccak_Hash object at 0x102960588>
h = keccak_hash.hexdigest()
print (h)   #'39c0eb3b26d4838930b1f34babcd68033a72978c1084e2d44d1fa06ddc4a2d57'

#################################################################
#4 Получить адрес
# Возьмите последние 40 букв шестнадцатеричной строки хеш-значения и добавьте 0x в начале, чтобы сгенерировать окончательный адрес Ethereum:

address = '0x' + h[-40:]

print (address)