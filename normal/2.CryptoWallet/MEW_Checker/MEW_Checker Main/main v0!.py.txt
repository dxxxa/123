# os для очистки экрана
# time для счетчика
import os
import sys
from time import time, strftime, localtime

# для генерации
import random  # 1
import secp256k1Crypto  # 2
from Crypto.Hash import keccak  # 3

# Для парсинга
import requests

######### ГЕНЕРАЦИЯ #########
MAX_PRIVATE_KEY = "115792089237316195423570985008687907852837564279074904382605163141518161494336"

file_name = "Output_" + str(strftime("%d%b_%H-%M-%S", localtime())) + ".txt"


def private_to_public(private_key):
    private_key = bytes.fromhex(private_key)
    privkey = secp256k1Crypto.PrivateKey(private_key)
    privkey.pubkey.serialize(compressed=False).hex()
    keccak_hash = keccak.new(digest_bits=256)
    public_key = privkey.pubkey.serialize(compressed=False).hex()[2:]
    public_key = bytes.fromhex(public_key)
    keccak_hash.update(public_key)
    h = keccak_hash.hexdigest()
    public_key = '0x' + h[-40:]
    return public_key


def private_to_dec(private_key):
    return int(private_key, 16)


def dec_to_address(number):
    print("DECimal  :", number)
    private_key = number.to_bytes(32, byteorder='big').hex()
    print("PRIV-Key :", private_key)
    public_key = private_to_public(private_key)
    print("PUB-Key  :", public_key, '\n')
    test(public_key, number, private_key)


def test(public_key, key_number=-1, private_key=-1):
    file = open(file_name, "a")
    public_key = public_key.strip()
    r = requests.get(f"https://tokenbalance.mewapi.io/eth?address={public_key}")
    tr = r.text[13:-4].split("\"},{\"")
    wsum = 0
    for i in tr:
        value = int(i[66:], 16)
        wsum += value
    if wsum != 0:
        file.write(f"DECimal : {key_number}\nPRIV-Key : {private_key}\nPUB-Key : {public_key}\n")
        for i in tr:
            wallet = i[11:53]
            value = int(i[66:], 16)
            wsum += value
            if value > 0:
                file.write(wallet + " " + str(value) + "\n")
        file.write("\n\n")
    file.close()


def priv_check(PRIV_Key):
    private_key = PRIV_Key
    private_key = bytes.fromhex(private_key)
    privkey = secp256k1Crypto.PrivateKey(private_key)
    privkey.pubkey.serialize(compressed=False).hex()
    keccak_hash = keccak.new(digest_bits=256)
    public_key = privkey.pubkey.serialize(compressed=False).hex()[2:]
    public_key = bytes.fromhex(public_key)
    keccak_hash.update(public_key)
    h = keccak_hash.hexdigest()

    address = '0x' + h[-40:]
    inp = (address).strip()
    r = requests.get(f"https://tokenbalance.mewapi.io/eth?address={inp}")
    tr = r.text[13:-4].split("\"},{\"")
    wsum = 0
    for i in tr:
        value = int(i[66:], 16)
        wsum += value
    if wsum != 0:
        print(f"PUB-Key : {inp}")
        for i in tr:
            wallet = i[11:53]
            value = i
            nt(i[66:], 16)
            wsum += value
            if value > 0:
                print(wallet + " " + str(value))
        print("\n")


######### ПАРСИНГ #########
def single_mew(inp):
    r = requests.get(f"https://tokenbalance.mewapi.io/eth?address={inp}")
    tr = r.text[13:-4].split("\"},{\"")
    for i in tr:
        print(i[11:53], int(i[66:], 16))


def check_list_all_mew():
    t = time()
    file2 = open("input.txt", "r")
    for line in file2.readlines():
        file = open("output.txt", "a")
        inp = line.strip()
        r = requests.get(f"https://tokenbalance.mewapi.io/eth?address={inp}")
        tr = r.text[13:-4].split("\"},{\"")
        wsum = 0
        for i in tr:
            value = int(i[66:], 16)
            wsum += value
        if wsum != 0:
            file.write(f"Wallet: {inp}" + "\n")
            for i in tr:
                wallet = i[11:53]
                value = int(i[66:], 16)
                wsum += value
                if value > 0:
                    file.write(wallet + " " + str(value) + "\n")
            file.write("\n\n")
    t2 = time()
    print(t2 - t)


######### МЕНЮ ######### из 3 и 4 режимы нет кнопки назад и выход
def main():
    print("""\nMyEtherWallet | MEW\n[1] Check One\n[2] Check List\n[3] Check Range\n[4] Check Random\n\n[5] Delete Output\n[q] Quit\n""")

    x = input(">>> ")
    if x == "q":
        exit(0)

    elif x == "1":
        os.system('cls')
        print("""\nMyEtherWallet | Check One\n[1] DECimal\n[2] PRIV-Key\n[3] PUB-Key\n\n[b] Back\n[q] Quit\n""")
        y = input(">>> ")
        if y == "q":
            exit(0)
        elif y == "1":
            while True:
                r1 = int(input("DECimal :>>> ").strip())
                t = time()
                dec_to_address(r1)
                t2 = time()
                print(f"Time: {t2 - t}")
                return main()

        elif y == "2":
            while True:
                r1 = input("PRIV-Key :>>> ").strip()
                t = time()
                priv_check(str(r1))
                t2 = time()
                print(f"Time: {t2 - t}")
                return main()

        # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #        DECimal: >>>   не отображает баланс,но записывает в файл
        #          PRIV :>>>    отображает баланс, но не записывает и из приватного получать десятичый!
        # нужен ли счетчик? показывать сколько проверенно и на каком остановился
        ############################################
        elif y == "3":
            r1 = input("PUB-Key :>>> ").strip()
            t = time()
            single_mew(r1)
            t2 = time()
            print(f"Time: {t2 - t}")
            return main()
        elif y == "b":
            os.system('cls')
            return main()
        else:
            print("Command not Recognized")


    elif x == "2":
        os.system('cls')
        print("MyEtherWallet | Check List")
        t = time()
        check_list_all_mew()
        t2 = time()
        print(f"Time: {t2 - t}")
        return main()


    elif x == "3":
        os.system('cls')
        while True:
            print("MyEtherWallet | Check Range")
            r1 = int(input("Input Starting Range :>>> "))
            r2 = int(input("Input Ending Range   :>>> "))
            t = time()
            change_file = open("change.txt", "a")
            change_file.write(f"{file_name}   Range: {r1} to {r2}\n")
            change_file.close()
            for x in range(r1, r2):
                print (x)
                dec_to_address(x)
                #if x == (r2-1):
                    #print('complete')
            t2 = time()
            print(t2 - t)
            return main()


    elif x == "4":
        os.system('cls')
        while True:
            print("MyEtherWallet | Check Random | 0<--->2^256")
            r1 = int(input("Input Starting Range :>>> "))
            r2 = int(input("Input Ending Range   :>>> "))
            r3 = int(input("Input Number         :>>> "))
            t = time()
            for x in range(r3):
                i = random.randint(r1, r2)  # (0, 2 ** 256) default
                dec_to_address(i)
            t2 = time()
            print(t2 - t)
            # return main()


    elif x == "5":
        yes = 'y' in input("(Y)es/(N)o: ").lower().strip()
        if not yes:
            print("Not confirmed")
            return main()
        print('Deleting all .txt files')
        files_in_directory = os.listdir(os.getcwd())
        filtered_files = [file for file in files_in_directory if file.endswith(".txt")]
        for file in filtered_files:
            if file not in ("input.txt", "change.txt"):
                path_to_file = os.path.join(os.getcwd(), file)
                os.remove(path_to_file)
        return main()

    else:
        print("Command not Recognized")


main()