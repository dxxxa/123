# Точка в полигоне(попадают ли координаты в прямоугольник или нет) v1.py
# http://geospatialpython.com/2011/08/point-in-polygon-2-on-line.html

# Improved point in polygon test which includes edge
# and vertex points

def point_in_poly(x, y, poly):
    # check if point is a vertex
    if (x, y) in poly: return "IN"

    # check if point is on a boundary
    for i in range(len(poly)):
        p1 = None
        p2 = None
        if i == 0:
            p1 = poly[0]
            p2 = poly[1]
        else:
            p1 = poly[i - 1]
            p2 = poly[i]
        if p1[1] == p2[1] and p1[1] == y and x > min(p1[0], p2[0]) and x < max(p1[0], p2[0]):
            return "IN"

    n = len(poly)
    inside = False

    p1x, p1y = poly[0]
    for i in range(n + 1):
        p2x, p2y = poly[i % n]
        if y > min(p1y, p2y):
            if y <= max(p1y, p2y):
                if x <= max(p1x, p2x):
                    if p1y != p2y:
                        xints = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                    if p1x == p2x or x <= xints:
                        inside = not inside
        p1x, p1y = p2x, p2y

    if inside:
        return "IN"
    else:
        return "OUT"


# Test a vertex for inclusion
poligono = [(55.7508954106368,37.670474214590485),(55.75277722368202,37.67280237201547),
            (55.75389607842752,37.67279229129573),(55.757798979355655,37.67016307834478),
            (55.75939612458,37.67281310085152),(55.75912388855562,37.68093482974858),
            (55.76046690106133,37.684518260992476),(55.76197319767284,37.68560187343452),
            (55.76407828538217,37.68568770412302),(55.768100621158304,37.68922822002258),
            (55.768841532288086,37.684947414434866),(55.77040042355282,37.68472210887748),
            (55.7699861364941,37.679226262605894),(55.77127434298082,37.678947312868296),
            (55.771534398259995,37.6809911561377),(55.77272276821559,37.68341319087815),
            (55.773890283959574,37.68494943814481),(55.774773195754925,37.68392483430114),
            (55.77792218500743,37.68998930888372),(55.77925850072532,37.69196877913671),
            (55.78125381863451,37.69595454173284),(55.78220307022641,37.6966304584046),
            (55.78185844013649,37.685847978164645),(55.77745053312578,37.679507236053446),
            (55.7784875548801,37.67616520362084),(55.77602647254666,37.67085979418927),
            (55.77449048457581,37.66782889800245),(55.77329007369524,37.66426156001258),
            (55.76977797516406,37.66298466539071),(55.76965701386272,37.655080195423544),
            (55.76480918348883,37.65847587203639),(55.75666661153943,37.66218804931282),
            (55.75625520302161,37.6607181987727),(55.75445826470409,37.66085767364146),
            (55.75409523676132,37.662992712017285),(55.75261888819546,37.664237257000174),
            (55.753145297604924,37.666157718654844),(55.75124534958596,37.66902231788272),
            (55.7508954106368,37.670474214590485)]


file1 = open("sample.txt", "r")
while True:
    str1 = str(file1.readline())
    if not str1:
        break
    a, b = map(float, str1.split(","))
    lat = a
    lon = b
    my_file = open("some.txt", 'a')

    print(lat, lon, point_in_poly(lat, lon, poligono))
    abc = point_in_poly(lat, lon, poligono)

    my_file.write(abc + '\n')
    my_file.close()
file1.close()
my_file.close()

#lat = a
#lon = b

#print(lat, lon, point_in_poly(lat, lon, poligono))

# test a boundary point for inclusion
#poly2 = [(1, 1), (5, 1), (5, 5), (1, 5), (1, 1)]
#x = 3
#y = 1
#print(point_in_poly(x, y, poly2))
