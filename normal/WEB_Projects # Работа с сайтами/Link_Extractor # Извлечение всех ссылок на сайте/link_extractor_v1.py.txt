# Извлечение всех ссылок web-сайта с помощью Python
# How to Extract All Website Links in Python
# https://newtechaudit.ru/izvlechenie-vseh-ssylok-veb-sajta-s-pomoshhyu-python/?ysclid=leiwhi2yyq900571240
# https://www.thepythoncode.com/article/extract-all-website-links-python

import requests
from urllib.parse import urlparse, urljoin
from bs4 import BeautifulSoup

import colorama

# init the colorama module
colorama.init()
GREEN = colorama.Fore.GREEN
GRAY = colorama.Fore.LIGHTBLACK_EX
RESET = colorama.Fore.RESET
YELLOW = colorama.Fore.YELLOW


# Определим две переменные:
# одну для всех внутренних ссылок (это URL, которые ссылаются на другие страницы того же сайта),
# другую для внешних ссылок вэб-сайта (это ссылки на другие сайты).

# Инициализировать набор ссылок (уникальные ссылки)
internal_urls = set()
external_urls = set()


# Функция проверки URL – адресов.
# Это обеспечит правильную схему в ссылке — протокол, например, http или https и имя домена в URL.
# Проверяем URL
def valid_url(url):
    parsed = urlparse(url)
    return bool(parsed.netloc) and bool(parsed.scheme)


# Функция возвращающую все действительные URL-адреса одной конкретной веб-страницы:
# Возвращаем все URL-адреса
def website_links(url):
    urls = set()
    domain_name = urlparse(url).netloc  # извлекаем доменное имя из URL
    soup = BeautifulSoup(requests.get(url).content, "html.parser")  # скачиваем HTML-контент вэб-страницы

    # Получить все HTML теги, содержащие все ссылки  вэб-страницы.
    for a_tag in soup.findAll("a"):
        href = a_tag.attrs.get("href")
        if href == "" or href is None:  # href пустой тег
            continue

        # В итоге получаем атрибут href и проверяем его.
        # Так как не все ссылки абсолютные,
        # возникает необходимость выполнить соединение относительных URL-адресов и имени домена.
        # К примеру, когда найден href — «/search» и URL — «google.com», то в результате получим «google.com/search».

        # присоединить URL, если он относительный (не абсолютная ссылка)
        href = urljoin(url, href)
        # В следующем шаге удаляем параметры HTTP GET из URL-адресов:

        parsed_href = urlparse(href)
        # удалить параметры URL GET, фрагменты URL и т. д.
        href = parsed_href.scheme + "://" + parsed_href.netloc + parsed_href.path

        # Если URL-адрес недействителен/URL уже находится в internal_urls, следует перейти к следующей ссылке.
        # Если URL является внешней ссылкой, вывести его и добавить в глобальный набор external_urls и перейдти к следующей ссылке.
        # После всех проверок получаем URL, являющийся внутренней ссылкой; выводим ее и добавляем в наборы urls и internal_urls

        if not valid_url(href):  # недействительный URL
            continue
        if href in internal_urls:  # уже в наборе
            continue
        if domain_name not in href:  # внешняя ссылка
            if href not in external_urls:
                print(f"{GRAY}[!] External link: {href}{RESET}")
                external_urls.add(href)
            continue
        print(f"{GREEN}[*] Internal link: {href}{RESET}")
        urls.add(href)
        internal_urls.add(href)
    return urls
    # Напоминаю, что эта функция захватывает ссылки одной вэб-страницы.


# Теперь создадим функцию, которая сканирует весь веб-сайт.
# Функция получает все ссылки на первой странице сайта,
# затем рекурсивно вызывается для перехода по всем извлеченным ссылкам.

# Параметр max_urls позволяет избежать зависания программы на больших сайтах
# при достижении определенного количества проверенных URL-адресов.


# Количество посещенных URL-адресов
visited_urls = 0


# Просматриваем веб-страницу и извлекаем все ссылки.
def crawl(url, max_urls=50):  # max_urls (int): количество макс. URL для сканирования
    global visited_urls
    visited_urls += 1
    print(f"{YELLOW}[*] Crawling: {url}{RESET}")
    links = website_links(url)
    for link in links:
        if visited_urls > max_urls:
            break
        crawl(link, max_urls=max_urls)


# Проверим на сайте, к которому имеется разрешение, как все это работает:
if __name__ == "__main__":
    crawl("https://newtechaudit.ru")
    print("[+] Total External links:", len(external_urls))
    print("[+] Total Internal links:", len(internal_urls))
    print("[+] Total:", len(external_urls) + len(internal_urls))
    #print("[+] Total crawled URLs:", max_urls)
